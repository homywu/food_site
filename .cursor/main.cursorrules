# Restaurant Showcase & Ordering Portal - Main Cursor Rules

## Project Overview
This is the main cursor rules file for the restaurant showcase and ordering portal project. It provides general guidelines and references role-specific rules located in the `.cursor/` directory.

## General Project Rules

### File Organization
- Use clear, descriptive names for all files and directories
- Follow consistent naming conventions across the project
- Organize files by feature or component
- Maintain proper directory structure

### Documentation
- All code should be well-documented, plus, avoid all the lint issues
- Include README files for major components
- Document API endpoints and data models
- Maintain up-to-date project documentation

### Version Control
- Use clear, descriptive commit messages
- Follow conventional commit format
- Create feature branches for new development
- Require code reviews before merging

## Role-Specific Rules

This project uses separate cursor rules files for each role. Please refer to the appropriate role-specific file based on your current task:

### Available Role Files:
- `.cursor/project-manager.cursorrules` - Project coordination and management
- `.cursor/product-owner.cursorrules` - Requirements and product vision
- `.cursor/ux-ui-designer.cursorrules` - User experience and design
- `.cursor/frontend-developer.cursorrules` - Frontend development
- `.cursor/backend-developer.cursorrules` - Backend development
- `.cursor/devops-engineer.cursorrules` - Infrastructure and deployment
- `.cursor/qa-engineer.cursorrules` - Testing and quality assurance
- `.cursor/content-manager.cursorrules` - Content strategy and management
- `.cursor/data-analyst.cursorrules` - Analytics and insights
- `.cursor/security-specialist.cursorrules` - Security and compliance

## Cross-Role Collaboration

### Communication
- Use clear, professional language in all communications
- Document decisions and changes in appropriate files
- Regular status updates and progress tracking
- Share knowledge and best practices across roles

### Code Reviews
- All code changes require review by appropriate team members
- Provide constructive feedback and suggestions
- Ensure code follows established conventions
- Verify that changes meet requirements and standards

### Quality Assurance
- Each role is responsible for quality within their domain
- Cross-functional testing and validation
- Regular feedback loops between roles
- Continuous improvement processes

## Technology Stack Guidelines

### Frontend
- React with TypeScript
- CSS/SCSS with design system
- Responsive design principles
- Accessibility compliance

### Backend
- Node.js with TypeScript
- RESTful API design
- Database optimization
- Security best practices

### DevOps
- Infrastructure as Code
- CI/CD pipelines
- Monitoring and logging
- Security and compliance

### Testing
- Unit tests for all components
- Integration tests for APIs
- End-to-end testing
- Performance testing

## Security and Compliance

### Data Protection
- Encrypt sensitive data at rest and in transit
- Implement proper authentication and authorization
- Follow data privacy regulations
- Regular security audits and updates

### Access Control
- Principle of least privilege
- Regular access reviews
- Secure credential management
- Audit logging for all actions

## Performance and Optimization

### Frontend Performance
- Optimize bundle sizes
- Implement lazy loading
- Use CDN for static assets
- Monitor Core Web Vitals

### Backend Performance
- Optimize database queries
- Implement caching strategies
- Monitor API response times
- Scale infrastructure as needed

## Monitoring and Maintenance

### Application Monitoring
- Real-time performance monitoring
- Error tracking and alerting
- User experience metrics
- Business metrics tracking

### Infrastructure Monitoring
- Server and service health
- Resource utilization
- Security event monitoring
- Backup and recovery testing

## Usage Instructions

1. **For Role-Specific Tasks**: Use the appropriate role-specific cursor rules file
2. **For Cross-Role Tasks**: Follow the general guidelines in this main file
3. **For New Features**: Consider all relevant role perspectives
4. **For Code Reviews**: Apply both general and role-specific guidelines

This structure ensures that each team member can focus on their specific domain while maintaining consistency across the entire project. 